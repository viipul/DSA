Given a circular integer array nums (i.e., the next element of nums[nums.length - 1] is nums[0]), return the next greater number for every element in nums.

The next greater number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn't exist, return -1 for this number.

 

Example 1:

Input: nums = [1,2,1]
Output: [2,-1,2]
Explanation: The first 1's next greater number is 2; 
The number 2 can't find next greater number. 
The second 1's next greater number needs to search circularly, which is also 2.
Example 2:

Input: nums = [1,2,3,4,3]
Output: [2,3,4,-1,4]
 

Constraints:

1 <= nums.length <= 104
-109 <= nums[i] <= 109


Optimized Python Solution:

def nextGreaterElements(self, nums):
    nums=list(nums)+list(nums)
    stack=[0]
    ans={}
    n=len(nums)
    for i in range(1,n):
        if len(stack)==0:
            stack.append(i)
            continue
        next_element=nums[i]
        while len(stack)>0 and next_element>nums[stack[-1]]:
            ans[stack[-1]]=next_element
            stack.pop()
        stack.append(i)

    while len(stack)>0:
        ans[stack[-1]]=-1
        stack.pop()
    final_ans=[]
    for i in range(n//2):
        final_ans.append(ans[i])
    return final_ans
